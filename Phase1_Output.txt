<STATIC>: static
<INT>: int
<ID>: intvalue
<ASSIGNMENT>: =
<NEW>: new
<INT>: int
<LEFT_ROUND_B>: (
<INTEGRAL_LITERAL>: 10
<PLUS>: +
<INTEGRAL_LITERAL>: 5
<RIGHT_ROUND_B>: )
<SEMICOLON>: ;
<SINGLE COMMENT>: /// This is just a comment
<BOOL>: bool
<ID>: isPowerOfTwo
<LEFT_ROUND_B>: (
<INT>: int
<ID>: x
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<MULTIPLE COMMENT>: /* This is a block
comment
*/
<SINGLE COMMENT>: // First x in the below expression is
<SINGLE COMMENT>: // for the case when x is 0
<RETURN>: return
<ID>: x
<NOT EQUAL>: !=
<ID>: x
<AND>: &&
<LEFT_ROUND_B>: (
<NOT>: !
<LEFT_ROUND_B>: (
<ID>: x
<BITWISE AND>: &
<LEFT_ROUND_B>: (
<ID>: x
<MINUS>: -
<INTEGRAL_LITERAL>: 1
<RIGHT_ROUND_B>: )
<RIGHT_ROUND_B>: )
<RIGHT_ROUND_B>: )
<SEMICOLON>: ;
<RIGHT-CURLY_B>: }
<VOID>: void
<ID>: main
<LEFT_ROUND_B>: (
<RIGHT_ROUND_B>: )
<LEFT_CURLY_B>: {
<FLOAT>: float
<ID>: floatone
<ASSIGNMENT>: =
<FLOAT_LITERAL>: .56
<SEMICOLON>: ;
<LONG>: long
<INT>: int
<ID>: longint
<ASSIGNMENT>: =
<INTEGRAL_LITERAL>: 6789
<SEMICOLON>: ;
<DOUBLE>: double
<ID>: doublediv
<ASSIGNMENT>: =
<ID>: floatone
<DIVIDE>: /
<ID>: longint
<SEMICOLON>: ;
<RIGHT-CURLY_B>: }
